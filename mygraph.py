from falcor import *

def render_graph_GBufferRT():
    g = RenderGraph('GBufferRT')
    loadRenderPassLibrary('DLSSPass.dll')
    loadRenderPassLibrary('AccumulatePass.dll')
    loadRenderPassLibrary('BSDFViewer.dll')
    loadRenderPassLibrary('Antialiasing.dll')
    loadRenderPassLibrary('BlitPass.dll')
    loadRenderPassLibrary('CSM.dll')
    loadRenderPassLibrary('DebugPasses.dll')
    loadRenderPassLibrary('PathTracer.dll')
    loadRenderPassLibrary('DepthPass.dll')
    loadRenderPassLibrary('ErrorMeasurePass.dll')
    loadRenderPassLibrary('SimplePostFX.dll')
    loadRenderPassLibrary('FLIPPass.dll')
    loadRenderPassLibrary('ForwardLightingPass.dll')
    loadRenderPassLibrary('GBuffer.dll')
    loadRenderPassLibrary('ModulateIllumination.dll')
    loadRenderPassLibrary('ImageDumpPass.dll')
    loadRenderPassLibrary('WhittedRayTracer.dll')
    loadRenderPassLibrary('ImageLoader.dll')
    loadRenderPassLibrary('MegakernelPathTracer.dll')
    loadRenderPassLibrary('MinimalPathTracer.dll')
    loadRenderPassLibrary('NRDPass.dll')
    loadRenderPassLibrary('OptixDenoiser.dll')
    loadRenderPassLibrary('PassLibraryTemplate.dll')
    loadRenderPassLibrary('PixelInspectorPass.dll')
    loadRenderPassLibrary('SkyBox.dll')
    loadRenderPassLibrary('RTXDIPass.dll')
    loadRenderPassLibrary('RTXGIPass.dll')
    loadRenderPassLibrary('SceneDebugger.dll')
    loadRenderPassLibrary('SDFEditor.dll')
    loadRenderPassLibrary('SSAO.dll')
    loadRenderPassLibrary('SVGFPass.dll')
    loadRenderPassLibrary('TemporalDelayPass.dll')
    loadRenderPassLibrary('TestPasses.dll')
    loadRenderPassLibrary('ToneMapper.dll')
    loadRenderPassLibrary('Utils.dll')
    GBufferRT = createPass('GBufferRT', {'outputSize': IOSize.Default, 'samplePattern': SamplePattern.Center, 'sampleCount': 16, 'useAlphaTest': True, 'adjustShadingNormals': True, 'forceCullMode': False, 'cull': CullMode.CullBack, 'texLOD': TexLODMode.Mip0, 'useTraceRayInline': False, 'useDOF': True})
    g.addPass(GBufferRT, 'GBufferRT')
    ImageDumpPass = createPass('ImageDumpPass')
    g.addPass(ImageDumpPass, 'ImageDumpPass')
    g.addEdge('GBufferRT.emissive', 'ImageDumpPass.src')
    g.markOutput('GBufferRT.posW')
    g.markOutput('GBufferRT.posW', TextureChannelFlags.Alpha)
    g.markOutput('GBufferRT.normW')
    g.markOutput('GBufferRT.tangentW')
    g.markOutput('GBufferRT.tangentW', TextureChannelFlags.Alpha)
    g.markOutput('GBufferRT.faceNormalW')
    g.markOutput('GBufferRT.texC')
    g.markOutput('GBufferRT.texGrads')
    g.markOutput('GBufferRT.texGrads', TextureChannelFlags.Alpha)
    g.markOutput('GBufferRT.mvec')
    g.markOutput('GBufferRT.mtlData')
    g.markOutput('GBufferRT.vbuffer')
    g.markOutput('GBufferRT.vbuffer', TextureChannelFlags.Alpha)
    g.markOutput('GBufferRT.depth')
    g.markOutput('GBufferRT.linearZ')
    g.markOutput('GBufferRT.mvecW')
    g.markOutput('GBufferRT.normWRoughnessMaterialID')
    g.markOutput('GBufferRT.normWRoughnessMaterialID', TextureChannelFlags.Alpha)
    g.markOutput('GBufferRT.diffuseOpacity')
    g.markOutput('GBufferRT.diffuseOpacity', TextureChannelFlags.Alpha)
    g.markOutput('GBufferRT.specRough')
    g.markOutput('GBufferRT.specRough', TextureChannelFlags.Alpha)
    g.markOutput('GBufferRT.emissive')
    g.markOutput('GBufferRT.viewW')
    g.markOutput('GBufferRT.disocclusion')
    g.markOutput('ImageDumpPass.dst')
    return g

GBufferRT = render_graph_GBufferRT()
try: m.addGraph(GBufferRT)
except NameError: None
