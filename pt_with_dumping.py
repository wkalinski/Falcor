from falcor import *

def render_graph_PathTracerWithDumping():
    g = RenderGraph('PathTracerWithDumping')
    loadRenderPassLibrary('DLSSPass.dll')
    loadRenderPassLibrary('AccumulatePass.dll')
    loadRenderPassLibrary('BSDFViewer.dll')
    loadRenderPassLibrary('Antialiasing.dll')
    loadRenderPassLibrary('BlitPass.dll')
    loadRenderPassLibrary('CSM.dll')
    loadRenderPassLibrary('DebugPasses.dll')
    loadRenderPassLibrary('PathTracer.dll')
    loadRenderPassLibrary('DepthPass.dll')
    loadRenderPassLibrary('ErrorMeasurePass.dll')
    loadRenderPassLibrary('SimplePostFX.dll')
    loadRenderPassLibrary('FLIPPass.dll')
    loadRenderPassLibrary('ForwardLightingPass.dll')
    loadRenderPassLibrary('GBuffer.dll')
    loadRenderPassLibrary('ModulateIllumination.dll')
    loadRenderPassLibrary('ImageDumpPass.dll')
    loadRenderPassLibrary('WhittedRayTracer.dll')
    loadRenderPassLibrary('ImageLoader.dll')
    loadRenderPassLibrary('MegakernelPathTracer.dll')
    loadRenderPassLibrary('MinimalPathTracer.dll')
    loadRenderPassLibrary('NRDPass.dll')
    loadRenderPassLibrary('OptixDenoiser.dll')
    loadRenderPassLibrary('PassLibraryTemplate.dll')
    loadRenderPassLibrary('PixelInspectorPass.dll')
    loadRenderPassLibrary('SkyBox.dll')
    loadRenderPassLibrary('RTXDIPass.dll')
    loadRenderPassLibrary('RTXGIPass.dll')
    loadRenderPassLibrary('SceneDebugger.dll')
    loadRenderPassLibrary('SDFEditor.dll')
    loadRenderPassLibrary('SSAO.dll')
    loadRenderPassLibrary('SVGFPass.dll')
    loadRenderPassLibrary('TemporalDelayPass.dll')
    loadRenderPassLibrary('TestPasses.dll')
    loadRenderPassLibrary('ToneMapper.dll')
    loadRenderPassLibrary('Utils.dll')
    ImageDumpPass1 = createPass('ImageDumpPass', {'image_name': 'FinalImage/FinalImage_', 'alpha': False})
    g.addPass(ImageDumpPass1, 'ImageDumpPass1')
    PathTracer = createPass('PathTracer', {'samplesPerPixel': 1, 'maxSurfaceBounces': 10, 'maxDiffuseBounces': 3, 'maxSpecularBounces': 3, 'maxTransmissionBounces': 10, 'sampleGenerator': 1, 'useBSDFSampling': True, 'useRussianRoulette': False, 'useNEE': True, 'useMIS': True, 'misHeuristic': MISHeuristic.Balance, 'misPowerExponent': 2.0, 'emissiveSampler': EmissiveLightSamplerType.LightBVH, 'lightBVHOptions': LightBVHSamplerOptions(buildOptions=LightBVHBuilderOptions(splitHeuristicSelection=SplitHeuristic.BinnedSAOH, maxTriangleCountPerLeaf=10, binCount=16, volumeEpsilon=0.0010000000474974513, splitAlongLargest=False, useVolumeOverSA=False, useLeafCreationCost=True, createLeavesASAP=True, allowRefitting=True, usePreintegration=True, useLightingCones=True), useBoundingCone=True, useLightingCone=True, disableNodeFlux=False, useUniformTriangleSampling=True, solidAngleBoundMethod=SolidAngleBoundMethod.Sphere), 'useRTXDI': False, 'RTXDIOptions': RTXDIOptions(mode=RTXDIMode.SpatiotemporalResampling, presampledTileCount=128, presampledTileSize=1024, storeCompactLightInfo=True, localLightCandidateCount=24, infiniteLightCandidateCount=8, envLightCandidateCount=8, brdfCandidateCount=1, brdfCutoff=0.0, testCandidateVisibility=True, biasCorrection=RTXDIBiasCorrection.Basic, depthThreshold=0.10000000149011612, normalThreshold=0.5, samplingRadius=30.0, spatialSampleCount=1, spatialIterations=5, maxHistoryLength=20, boilingFilterStrength=0.0, rayEpsilon=0.0010000000474974513, useEmissiveTextures=False, enableVisibilityShortcut=False, enablePermutationSampling=False), 'useAlphaTest': True, 'adjustShadingNormals': False, 'maxNestedMaterials': 2, 'useLightsInDielectricVolumes': False, 'disableCaustics': False, 'specularRoughnessThreshold': 0.25, 'primaryLodMode': TexLODMode.Mip0, 'lodBias': 0.0, 'useNRDDemodulation': True, 'outputSize': IOSize.Default, 'colorFormat': ColorFormat.LogLuvHDR})
    g.addPass(PathTracer, 'PathTracer')
    VBufferRT = createPass('VBufferRT', {'outputSize': IOSize.Default, 'samplePattern': SamplePattern.Stratified, 'sampleCount': 16, 'useAlphaTest': True, 'adjustShadingNormals': True, 'forceCullMode': False, 'cull': CullMode.CullBack, 'useTraceRayInline': False, 'useDOF': False})
    g.addPass(VBufferRT, 'VBufferRT')
    AccumulatePass = createPass('AccumulatePass', {'enabled': True, 'outputSize': IOSize.Default, 'autoReset': True, 'precisionMode': AccumulatePrecision.Double, 'subFrameCount': 0, 'maxAccumulatedFrames': 0})
    g.addPass(AccumulatePass, 'AccumulatePass')
    ToneMapper = createPass('ToneMapper', {'outputSize': IOSize.Default, 'useSceneMetadata': True, 'exposureCompensation': 0.0, 'autoExposure': False, 'filmSpeed': 100.0, 'whiteBalance': False, 'whitePoint': 6500.0, 'operator': ToneMapOp.Aces, 'clamp': True, 'whiteMaxLuminance': 1.0, 'whiteScale': 11.199999809265137, 'fNumber': 1.0, 'shutter': 1.0, 'exposureMode': ExposureMode.AperturePriority})
    g.addPass(ToneMapper, 'ToneMapper')
    AccumulatePass0 = createPass('AccumulatePass', {'enabled': True, 'outputSize': IOSize.Default, 'autoReset': True, 'precisionMode': AccumulatePrecision.Double, 'subFrameCount': 0, 'maxAccumulatedFrames': 0})
    g.addPass(AccumulatePass0, 'AccumulatePass0')
    ImageDumpPass = createPass('ImageDumpPass', {'image_name': 'Albedo/Albedo_', 'alpha': False})
    g.addPass(ImageDumpPass, 'ImageDumpPass')
    ImageDumpPass0 = createPass('ImageDumpPass', {'image_name': 'PretonemapHDRColor/PretonemapHDRColor_', 'alpha': False})
    g.addPass(ImageDumpPass0, 'ImageDumpPass0')
    AccumulatePass1 = createPass('AccumulatePass', {'enabled': True, 'outputSize': IOSize.Default, 'autoReset': True, 'precisionMode': AccumulatePrecision.Double, 'subFrameCount': 0, 'maxAccumulatedFrames': 0})
    g.addPass(AccumulatePass1, 'AccumulatePass1')
    ImageDumpPass2 = createPass('ImageDumpPass', {'image_name': 'SpecularAlbedo/SpecularAlbedo_', 'alpha': False})
    g.addPass(ImageDumpPass2, 'ImageDumpPass2')
    ImageDumpPass3 = createPass('ImageDumpPass', {'image_name': 'MotionVectors/MotionVectors_', 'alpha': False})
    g.addPass(ImageDumpPass3, 'ImageDumpPass3')
    AccumulatePass2 = createPass('AccumulatePass', {'enabled': True, 'outputSize': IOSize.Default, 'autoReset': True, 'precisionMode': AccumulatePrecision.Double, 'subFrameCount': 0, 'maxAccumulatedFrames': 0})
    g.addPass(AccumulatePass2, 'AccumulatePass2')
    ImageDumpPass5 = createPass('ImageDumpPass', {'image_name': 'IndirectAlbedo/IndirectAlbedo_', 'alpha': False})
    g.addPass(ImageDumpPass5, 'ImageDumpPass5')
    AccumulatePass3 = createPass('AccumulatePass', {'enabled': True, 'outputSize': IOSize.Default, 'autoReset': True, 'precisionMode': AccumulatePrecision.Double, 'subFrameCount': 0, 'maxAccumulatedFrames': 0})
    g.addPass(AccumulatePass3, 'AccumulatePass3')
    ImageDumpPass4 = createPass('ImageDumpPass', {'image_name': 'Normal/Normal_', 'alpha': False})
    g.addPass(ImageDumpPass4, 'ImageDumpPass4')
    AccumulatePass4 = createPass('AccumulatePass', {'enabled': True, 'outputSize': IOSize.Default, 'autoReset': True, 'precisionMode': AccumulatePrecision.Double, 'subFrameCount': 0, 'maxAccumulatedFrames': 0})
    g.addPass(AccumulatePass4, 'AccumulatePass4')
    ImageDumpPass7 = createPass('ImageDumpPass', {'image_name': 'Emission/Emission_', 'alpha': False})
    g.addPass(ImageDumpPass7, 'ImageDumpPass7')
    AccumulatePass6 = createPass('AccumulatePass', {'enabled': True, 'outputSize': IOSize.Default, 'autoReset': True, 'precisionMode': AccumulatePrecision.Double, 'subFrameCount': 0, 'maxAccumulatedFrames': 0})
    g.addPass(AccumulatePass6, 'AccumulatePass6')
    ImageDumpPass8 = createPass('ImageDumpPass', {'image_name': 'DiffuseReflectance/DiffuseReflectance_', 'alpha': False})
    g.addPass(ImageDumpPass8, 'ImageDumpPass8')
    ImageDumpPass9 = createPass('ImageDumpPass', {'image_name': 'SpecularReflectance/SpecularReflectance_', 'alpha': False})
    g.addPass(ImageDumpPass9, 'ImageDumpPass9')
    AccumulatePass7 = createPass('AccumulatePass', {'enabled': True, 'outputSize': IOSize.Default, 'autoReset': True, 'precisionMode': AccumulatePrecision.Double, 'subFrameCount': 0, 'maxAccumulatedFrames': 0})
    g.addPass(AccumulatePass7, 'AccumulatePass7')
    AccumulatePass8 = createPass('AccumulatePass', {'enabled': True, 'outputSize': IOSize.Default, 'autoReset': True, 'precisionMode': AccumulatePrecision.Double, 'subFrameCount': 0, 'maxAccumulatedFrames': 0})
    g.addPass(AccumulatePass8, 'AccumulatePass8')
    ImageDumpPass10 = createPass('ImageDumpPass', {'image_name': 'ReflectionPosWorld/ReflectionPosWorld_', 'alpha': False})
    g.addPass(ImageDumpPass10, 'ImageDumpPass10')
    g.addEdge('VBufferRT.vbuffer', 'PathTracer.vbuffer')
    g.addEdge('PathTracer.color', 'AccumulatePass.input')
    g.addEdge('AccumulatePass.output', 'ToneMapper.src')
    g.addEdge('PathTracer.albedo', 'AccumulatePass0.input')
    g.addEdge('AccumulatePass0.output', 'ImageDumpPass.src')
    g.addEdge('AccumulatePass.output', 'ImageDumpPass0.src')
    g.addEdge('ToneMapper.dst', 'ImageDumpPass1.src')
    g.addEdge('PathTracer.specularAlbedo', 'AccumulatePass1.input')
    g.addEdge('AccumulatePass1.output', 'ImageDumpPass2.src')
    g.addEdge('VBufferRT.mvec', 'ImageDumpPass3.src')
    g.addEdge('PathTracer.indirectAlbedo', 'AccumulatePass2.input')
    g.addEdge('AccumulatePass2.output', 'ImageDumpPass5.src')
    g.addEdge('PathTracer.normal', 'AccumulatePass3.input')
    g.addEdge('AccumulatePass3.output', 'ImageDumpPass4.src')
    g.addEdge('PathTracer.nrdEmission', 'AccumulatePass4.input')
    g.addEdge('AccumulatePass4.output', 'ImageDumpPass7.src')
    g.addEdge('PathTracer.nrdDiffuseReflectance', 'AccumulatePass6.input')
    g.addEdge('AccumulatePass6.output', 'ImageDumpPass8.src')
    g.addEdge('AccumulatePass7.output', 'ImageDumpPass9.src')
    g.addEdge('PathTracer.nrdSpecularReflectance', 'AccumulatePass7.input')
    g.addEdge('PathTracer.reflectionPosW', 'AccumulatePass8.input')
    g.addEdge('AccumulatePass8.output', 'ImageDumpPass10.src')
    g.markOutput('ToneMapper.dst')
    g.markOutput('ToneMapper.dst', TextureChannelFlags.Alpha)
    g.markOutput('PathTracer.color')
    g.markOutput('PathTracer.albedo')
    g.markOutput('PathTracer.specularAlbedo')
    g.markOutput('PathTracer.indirectAlbedo')
    g.markOutput('PathTracer.normal')
    g.markOutput('PathTracer.reflectionPosW')
    g.markOutput('PathTracer.rayCount')
    g.markOutput('PathTracer.pathLength')
    g.markOutput('ImageDumpPass.dst')
    g.markOutput('ImageDumpPass0.dst')
    g.markOutput('ImageDumpPass1.dst')
    g.markOutput('ImageDumpPass2.dst')
    g.markOutput('ImageDumpPass3.dst')
    g.markOutput('ImageDumpPass5.dst')
    g.markOutput('ImageDumpPass7.dst')
    g.markOutput('ImageDumpPass8.dst')
    g.markOutput('ImageDumpPass9.dst')
    g.markOutput('ImageDumpPass4.dst')
    g.markOutput('ImageDumpPass10.dst')
    return g

PathTracerWithDumping = render_graph_PathTracerWithDumping()
try: m.addGraph(PathTracerWithDumping)
except NameError: None
